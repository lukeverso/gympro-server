// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
     provider = "prisma-client-js"
}

generator erd {
     provider = "prisma-erd-generator"
}

datasource db {
     provider = "sqlite"
     url      = env("DATABASE_URL")
}

model Students {
     id        String  @id @default(uuid())
     name      String
     username  String  @unique
     email     String? @unique
     password  String
     birthdate String
     telephone String?
     status    Boolean

     street     String
     number     String
     complement String?
     code       String
     city       String
     country    String

     addressId  String?
     teacherId  String?
     measuresId String?

     createdAt DateTime @default(now())

     teacher  Teachers? @relation(fields: [teacherId], references: [id])
     measures Measures? @relation(fields: [measuresId], references: [id], onDelete: Cascade)

     exercises Workouts[]
}

model Teachers {
     id        String  @id @default(uuid())
     name      String
     username  String  @unique
     email     String? @unique
     password  String
     birthdate String
     telephone String?
     status    Boolean

     street     String
     number     String
     complement String?
     code       String
     city       String
     country    String

     gymId String?

     createdAt DateTime @default(now())

     Gym Gym? @relation(fields: [gymId], references: [id])

     students Students[]
}

model Gym {
     id       String @id @default(uuid())
     name     String
     username String @unique
     email    String @unique
     password String

     street     String
     number     String
     complement String?
     code       String
     city       String
     country    String

     createdAt DateTime @default(now())

     teachers      Teachers[]
     notifications Notification[]
}

model Notification {
     id    String  @id @default(uuid())
     gymId String?

     title   String
     content String

     createdAt DateTime @default(now())

     Gym Gym? @relation(fields: [gymId], references: [id])
}

model Measures {
     id        String @id @default(uuid())
     studentId String @unique

     height   String?
     weight   String?
     bmi      String?
     chest    String?
     wingspan String?
     waist    String?
     hip      String?
     arm      String?
     thigh    String?
     calf     String?
     bodyFat  String?

     student Students[]
}

model Workouts {
     id          String  @id @default(uuid())
     annotations String?
     endDate     String
     objective   String
     type        String
     focus       String
     startDate   String
     studentId   String  @unique
     active      Boolean

     exercises Exercises[]

     student Students @relation(fields: [studentId], references: [id])
}

model Exercises {
     id          String  @id @default(uuid())
     exerciseId  String  @unique
     name        String
     series      Int
     repetitions Int
     restTime    Int
     annotations String?
     finished    Boolean

     exercise Workouts @relation(fields: [exerciseId], references: [id])
}
