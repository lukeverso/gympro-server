// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
     provider = "prisma-client-js"
}

datasource db {
     provider = "sqlite"
     url      = env("DATABASE_URL")
}

model Students {
     id        String  @id @default(uuid())
     name      String
     email     String  @unique
     password  String
     birthdate String
     telephone String?
     status    Boolean
     picture   String?

     code       String
     street     String
     number     String
     complement String?
     district   String
     city       String
     state      String

     teacherId  String?
     gymId      String?
     measuresId String?

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     teacher Teachers? @relation(fields: [teacherId], references: [id])
     gym     Gyms?     @relation(fields: [gymId], references: [id])

     measures Measures[]
     sheets   Sheets[]
}

model Teachers {
     id        String  @id @default(uuid())
     name      String
     email     String  @unique
     password  String
     birthdate String
     telephone String?
     status    Boolean
     picture   String?

     code       String
     street     String
     number     String
     complement String?
     district   String
     city       String
     state      String

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     gymId String?

     gym Gyms? @relation(fields: [gymId], references: [id])

     students Students[]
}

model Gyms {
     id       String @id @default(uuid())
     name     String
     email    String @unique
     password String

     code       String
     street     String
     number     String
     complement String?
     district   String
     city       String
     state      String

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     teachers      Teachers[]
     notifications Notifications[]
     students      Students[]
}

model Notifications {
     id    String  @id @default(uuid())
     gymId String?

     title    String
     content  String
     expanded Boolean @default(false)

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     gym Gyms? @relation(fields: [gymId], references: [id])
}

model Measures {
     id         String  @id @default(uuid())
     studentsId String?

     height    String?
     weight    String?
     bmi       String?
     chest     String?
     wingspan  String?
     waist     String?
     hip       String?
     arm       String?
     thigh     String?
     calf      String?
     shoulders String?

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     student Students? @relation(fields: [studentsId], references: [id])
}

model Sheets {
     id          String  @id @default(uuid())
     studentsId  String
     annotations String?
     objective   String
     startDate   String
     endDate     String
     active      Boolean

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     workouts Workouts[]
     student  Students   @relation(fields: [studentsId], references: [id])
}

model Workouts {
     id       String @id @default(uuid())
     sheetsId String

     type   String
     focus  String
     active Boolean

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     exercises Exercises[]

     sheet Sheets @relation(fields: [sheetsId], references: [id])
}

model Exercises {
     id         String @id @default(uuid())
     workoutsId String

     name        String
     series      Int
     repetitions Int
     restTime    Int
     weight      String?
     annotations String?
     finished    Boolean

     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt

     Workouts Workouts @relation(fields: [workoutsId], references: [id])
}
